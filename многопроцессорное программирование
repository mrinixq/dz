import multiprocessing
from multiprocessing import Process, Queue

requests = [
    ("product1", "receipt", 100),
    ("product2", "receipt", 150),
    ("product1", "shipment", 30),
    ("product3", "receipt", 200),
    ("product2", "shipment", 50)
]


class WarehouseManager:
    def __init__(self):
        self.data = {}


    def process_request(self, request, shared_dict, lock):
        lock.acquire()
        try:
            product_name, action, quantity = request
            if action == "receipt":
                if product_name in shared_dict:
                    shared_dict[product_name] += quantity
                else:
                    shared_dict[product_name] = quantity
            elif action == "shipment":
                if product_name in shared_dict and shared_dict[product_name] >= quantity:
                    shared_dict[product_name] -= quantity
                else:
                    print("нет нужного количества товара")
        finally:
            lock.release()


    def run(self, requests):
        shared_dict= multiprocessing.Manager().dict()
        lock = multiprocessing.Lock()
        processes = [multiprocessing.Process(target=self.process_request, args=(i, shared_dict, lock))
                     for i in requests]
        for p in processes:
            p.start()

        for p in processes:
            p.join()

        self.data = shared_dict



if __name__ == '__main__':
    manager = WarehouseManager()
  
    manager.run(requests)
   
    print(manager.data)
